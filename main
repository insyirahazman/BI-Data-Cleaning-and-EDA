{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "22ecaac5",
   "metadata": {
    "papermill": {
     "duration": 0.006115,
     "end_time": "2025-10-14T13:37:09.834121",
     "exception": false,
     "start_time": "2025-10-14T13:37:09.828006",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## “Using the BI program dataset, how can Walsoft strategically improve student success, optimize resources, and increase the effectiveness of its training program?”"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "688e88a7",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-10-14T13:37:09.847948Z",
     "iopub.status.busy": "2025-10-14T13:37:09.847097Z",
     "iopub.status.idle": "2025-10-14T13:37:15.480849Z",
     "shell.execute_reply": "2025-10-14T13:37:15.478574Z"
    },
    "papermill": {
     "duration": 5.642752,
     "end_time": "2025-10-14T13:37:15.483243",
     "exception": false,
     "start_time": "2025-10-14T13:37:09.840491",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "e207dd57",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T13:37:15.498394Z",
     "iopub.status.busy": "2025-10-14T13:37:15.497622Z",
     "iopub.status.idle": "2025-10-14T13:37:15.576869Z",
     "shell.execute_reply": "2025-10-14T13:37:15.574789Z"
    },
    "papermill": {
     "duration": 0.091564,
     "end_time": "2025-10-14T13:37:15.580955",
     "exception": false,
     "start_time": "2025-10-14T13:37:15.489391",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fNAME</th>\n",
       "      <th>lNAME</th>\n",
       "      <th>Age</th>\n",
       "      <th>gender</th>\n",
       "      <th>country</th>\n",
       "      <th>residence</th>\n",
       "      <th>entryEXAM</th>\n",
       "      <th>prevEducation</th>\n",
       "      <th>studyHOURS</th>\n",
       "      <th>Python</th>\n",
       "      <th>DB</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Christina</td>\n",
       "      <td>Binger</td>\n",
       "      <td>44</td>\n",
       "      <td>Female</td>\n",
       "      <td>Norway</td>\n",
       "      <td>Private</td>\n",
       "      <td>72</td>\n",
       "      <td>Masters</td>\n",
       "      <td>158</td>\n",
       "      <td>59.0</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alex</td>\n",
       "      <td>Walekhwa</td>\n",
       "      <td>60</td>\n",
       "      <td>M</td>\n",
       "      <td>Kenya</td>\n",
       "      <td>Private</td>\n",
       "      <td>79</td>\n",
       "      <td>Diploma</td>\n",
       "      <td>150</td>\n",
       "      <td>60.0</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Philip</td>\n",
       "      <td>Leo</td>\n",
       "      <td>25</td>\n",
       "      <td>Male</td>\n",
       "      <td>Uganda</td>\n",
       "      <td>Sognsvann</td>\n",
       "      <td>55</td>\n",
       "      <td>HighSchool</td>\n",
       "      <td>130</td>\n",
       "      <td>74.0</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Shoni</td>\n",
       "      <td>Hlongwane</td>\n",
       "      <td>22</td>\n",
       "      <td>F</td>\n",
       "      <td>Rsa</td>\n",
       "      <td>Sognsvann</td>\n",
       "      <td>40</td>\n",
       "      <td>High School</td>\n",
       "      <td>120</td>\n",
       "      <td>NaN</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Maria</td>\n",
       "      <td>Kedibone</td>\n",
       "      <td>23</td>\n",
       "      <td>Female</td>\n",
       "      <td>South Africa</td>\n",
       "      <td>Sognsvann</td>\n",
       "      <td>65</td>\n",
       "      <td>High School</td>\n",
       "      <td>122</td>\n",
       "      <td>91.0</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       fNAME      lNAME  Age  gender       country  residence  entryEXAM  \\\n",
       "0  Christina     Binger   44  Female        Norway    Private         72   \n",
       "1       Alex   Walekhwa   60       M         Kenya    Private         79   \n",
       "2     Philip        Leo   25    Male        Uganda  Sognsvann         55   \n",
       "3      Shoni  Hlongwane   22       F           Rsa  Sognsvann         40   \n",
       "4      Maria   Kedibone   23  Female  South Africa  Sognsvann         65   \n",
       "\n",
       "  prevEducation  studyHOURS  Python  DB  \n",
       "0       Masters         158    59.0  55  \n",
       "1       Diploma         150    60.0  75  \n",
       "2    HighSchool         130    74.0  50  \n",
       "3   High School         120     NaN  44  \n",
       "4   High School         122    91.0  80  "
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\", category=RuntimeWarning)\n",
    "\n",
    "df = pd.read_csv(\"bi.csv\", encoding='latin1')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "56b171bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T13:37:15.603196Z",
     "iopub.status.busy": "2025-10-14T13:37:15.602721Z",
     "iopub.status.idle": "2025-10-14T13:37:15.642534Z",
     "shell.execute_reply": "2025-10-14T13:37:15.638817Z"
    },
    "papermill": {
     "duration": 0.053024,
     "end_time": "2025-10-14T13:37:15.644849",
     "exception": false,
     "start_time": "2025-10-14T13:37:15.591825",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 77 entries, 0 to 76\n",
      "Data columns (total 11 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   fNAME          77 non-null     object \n",
      " 1   lNAME          77 non-null     object \n",
      " 2   Age            77 non-null     int64  \n",
      " 3   gender         77 non-null     object \n",
      " 4   country        77 non-null     object \n",
      " 5   residence      77 non-null     object \n",
      " 6   entryEXAM      77 non-null     int64  \n",
      " 7   prevEducation  77 non-null     object \n",
      " 8   studyHOURS     77 non-null     int64  \n",
      " 9   Python         75 non-null     float64\n",
      " 10  DB             77 non-null     int64  \n",
      "dtypes: float64(1), int64(4), object(6)\n",
      "memory usage: 6.7+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "d899b737",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T13:37:15.661130Z",
     "iopub.status.busy": "2025-10-14T13:37:15.660686Z",
     "iopub.status.idle": "2025-10-14T13:37:15.671204Z",
     "shell.execute_reply": "2025-10-14T13:37:15.669647Z"
    },
    "papermill": {
     "duration": 0.022313,
     "end_time": "2025-10-14T13:37:15.673071",
     "exception": false,
     "start_time": "2025-10-14T13:37:15.650758",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Quantitative (Numerical) Columns:\n",
      "['Age', 'entryEXAM', 'studyHOURS', 'Python', 'DB']\n",
      "\n",
      "Qualitative (Categorical) Columns:\n",
      "['fNAME', 'lNAME', 'gender', 'country', 'residence', 'prevEducation']\n"
     ]
    }
   ],
   "source": [
    "# check data types \n",
    "quantitative = df.select_dtypes(include=['int64', 'float64']).columns.tolist()\n",
    "print(\"Quantitative (Numerical) Columns:\")\n",
    "print(quantitative)\n",
    "\n",
    "qualitative = df.select_dtypes(include=['object', 'category']).columns.tolist()\n",
    "print(\"\\nQualitative (Categorical) Columns:\")\n",
    "print(qualitative)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "e97eebd2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T13:37:15.686908Z",
     "iopub.status.busy": "2025-10-14T13:37:15.686289Z",
     "iopub.status.idle": "2025-10-14T13:37:15.697055Z",
     "shell.execute_reply": "2025-10-14T13:37:15.695800Z"
    },
    "papermill": {
     "duration": 0.020843,
     "end_time": "2025-10-14T13:37:15.699830",
     "exception": false,
     "start_time": "2025-10-14T13:37:15.678987",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check for any duplicate rows\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "72c439af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T13:37:15.714712Z",
     "iopub.status.busy": "2025-10-14T13:37:15.714330Z",
     "iopub.status.idle": "2025-10-14T13:37:15.726550Z",
     "shell.execute_reply": "2025-10-14T13:37:15.725545Z"
    },
    "papermill": {
     "duration": 0.021392,
     "end_time": "2025-10-14T13:37:15.728195",
     "exception": false,
     "start_time": "2025-10-14T13:37:15.706803",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "gender\n",
      "1    43\n",
      "0    34\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# standardize gender\n",
    "df['gender'] = df['gender'].map({'M': 0, 'Male': 0, 'male':0, 'F': 1, 'Female': 1, 'female':1})\n",
    "print(df['gender'].value_counts())\n",
    "\n",
    "# fill null values in Python\n",
    "df['Python'] = df['Python'].fillna(df['Python'].median())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "1ed0f803",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Before:\n",
      " ['Norway' 'Kenya' 'Uganda' 'Rsa' 'South Africa' 'Norge' 'norway' 'Denmark'\n",
      " 'Netherlands' 'Italy' 'Spain' 'UK' 'Somali' 'Nigeria' 'Germany' 'France']\n",
      "After:\n",
      " ['Norway' 'Kenya' 'Uganda' 'Russia' 'South Africa' 'Norge' 'Denmark'\n",
      " 'Netherlands' 'Italy' 'Spain' 'United Kingdom' 'Somali' 'Nigeria'\n",
      " 'Germany' 'France']\n",
      "country\n",
      "8     48\n",
      "13     4\n",
      "4      3\n",
      "2      3\n",
      "0      2\n",
      "5      2\n",
      "3      2\n",
      "12     2\n",
      "14     2\n",
      "10     2\n",
      "6      2\n",
      "1      2\n",
      "9      1\n",
      "11     1\n",
      "7      1\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# map to standardize name of country\n",
    "print(\"Before:\\n\", df['country'].unique())\n",
    "df['country'] = df['country'].replace({\n",
    "    'USA': 'United States',\n",
    "    'UK': 'United Kingdom', \n",
    "    'UAE': 'United Arab Emirates',\n",
    "    'Indiaa': 'India',\n",
    "    'INDIA': 'India',\n",
    "    'norway': 'Norway',\n",
    "    'Rsa': 'Russia'\n",
    "})\n",
    "\n",
    "print(\"After:\\n\", df['country'].unique())\n",
    "# encode country\n",
    "le = LabelEncoder()\n",
    "df['country'] = le.fit_transform(df['country'])\n",
    "print(df['country'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "b28c030c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Before:\n",
      " ['Private' 'Sognsvann' 'BI Residence' 'BI-Residence' 'BIResidence'\n",
      " 'BI_Residence']\n",
      "After:\n",
      " ['Private' 'Sognsvann' 'BI Residence']\n",
      "residence\n",
      "1    33\n",
      "0    32\n",
      "2    12\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# map to standardize name of residence\n",
    "print(\"Before:\\n\", df['residence'].unique())\n",
    "df['residence'] = df['residence'].replace({\n",
    "    'BI-Residence': 'BI Residence',\n",
    "    'BIResidence': 'BI Residence',\n",
    "    'BI_Residence': 'BI Residence',\n",
    "})\n",
    "\n",
    "print(\"After:\\n\", df['residence'].unique())\n",
    "# encode residence\n",
    "le = LabelEncoder()\n",
    "df['residence'] = le.fit_transform(df['residence'])\n",
    "print(df['residence'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "61350c8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T13:37:15.745445Z",
     "iopub.status.busy": "2025-10-14T13:37:15.744230Z",
     "iopub.status.idle": "2025-10-14T13:37:15.762941Z",
     "shell.execute_reply": "2025-10-14T13:37:15.760164Z"
    },
    "papermill": {
     "duration": 0.030747,
     "end_time": "2025-10-14T13:37:15.764660",
     "exception": false,
     "start_time": "2025-10-14T13:37:15.733913",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Before:\n",
      " ['Masters' 'Diploma' 'HighSchool' 'High School' 'Bachelors' 'Barrrchelors'\n",
      " 'diploma' 'DIPLOMA' 'Diplomaaa' 'Doctorate']\n",
      "After:\n",
      " ['Masters' 'Diploma' 'High School' 'Bachelors' 'Doctorate']\n",
      "prevEducation\n",
      "0    25\n",
      "3    19\n",
      "4    16\n",
      "1    12\n",
      "2     5\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# map to standardize name of prevEducation\n",
    "print(\"Before:\\n\", df['prevEducation'].unique())\n",
    "df['prevEducation'] = df['prevEducation'].replace({\n",
    "    'HighSchool': 'High School',\n",
    "    'Barrrchelors': 'Bachelors',\n",
    "    'Diplomaaa': 'Diploma',\n",
    "    'diploma': 'Diploma',\n",
    "    'DIPLOMA': 'Diploma'\n",
    "})\n",
    "\n",
    "print(\"After:\\n\", df['prevEducation'].unique())\n",
    "# encode preEducation\n",
    "le = LabelEncoder()\n",
    "df['prevEducation'] = le.fit_transform(df['prevEducation'])\n",
    "print(df['prevEducation'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "b9fe1190",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T13:37:15.802815Z",
     "iopub.status.busy": "2025-10-14T13:37:15.802229Z",
     "iopub.status.idle": "2025-10-14T13:37:15.840925Z",
     "shell.execute_reply": "2025-10-14T13:37:15.838996Z"
    },
    "papermill": {
     "duration": 0.065661,
     "end_time": "2025-10-14T13:37:15.843865",
     "exception": false,
     "start_time": "2025-10-14T13:37:15.778204",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>gender</th>\n",
       "      <th>country</th>\n",
       "      <th>residence</th>\n",
       "      <th>entryEXAM</th>\n",
       "      <th>prevEducation</th>\n",
       "      <th>studyHOURS</th>\n",
       "      <th>Python</th>\n",
       "      <th>DB</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>77.000000</td>\n",
       "      <td>77.000000</td>\n",
       "      <td>77.000000</td>\n",
       "      <td>77.000000</td>\n",
       "      <td>77.000000</td>\n",
       "      <td>77.000000</td>\n",
       "      <td>77.000000</td>\n",
       "      <td>77.000000</td>\n",
       "      <td>77.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>35.207792</td>\n",
       "      <td>0.558442</td>\n",
       "      <td>7.571429</td>\n",
       "      <td>0.740260</td>\n",
       "      <td>76.753247</td>\n",
       "      <td>1.857143</td>\n",
       "      <td>149.714286</td>\n",
       "      <td>75.987013</td>\n",
       "      <td>69.467532</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>10.341966</td>\n",
       "      <td>0.499829</td>\n",
       "      <td>2.962167</td>\n",
       "      <td>0.714559</td>\n",
       "      <td>16.475784</td>\n",
       "      <td>1.595341</td>\n",
       "      <td>12.743272</td>\n",
       "      <td>15.228517</td>\n",
       "      <td>17.033701</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>21.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>114.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>30.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>27.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>69.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>144.000000</td>\n",
       "      <td>72.000000</td>\n",
       "      <td>56.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>33.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>156.000000</td>\n",
       "      <td>81.000000</td>\n",
       "      <td>71.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>42.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>158.000000</td>\n",
       "      <td>85.000000</td>\n",
       "      <td>83.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>71.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>98.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>160.000000</td>\n",
       "      <td>91.000000</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Age     gender    country  residence  entryEXAM  prevEducation  \\\n",
       "count  77.000000  77.000000  77.000000  77.000000  77.000000      77.000000   \n",
       "mean   35.207792   0.558442   7.571429   0.740260  76.753247       1.857143   \n",
       "std    10.341966   0.499829   2.962167   0.714559  16.475784       1.595341   \n",
       "min    21.000000   0.000000   0.000000   0.000000  28.000000       0.000000   \n",
       "25%    27.000000   0.000000   8.000000   0.000000  69.000000       0.000000   \n",
       "50%    33.000000   1.000000   8.000000   1.000000  80.000000       2.000000   \n",
       "75%    42.000000   1.000000   8.000000   1.000000  90.000000       3.000000   \n",
       "max    71.000000   1.000000  14.000000   2.000000  98.000000       4.000000   \n",
       "\n",
       "       studyHOURS     Python          DB  \n",
       "count   77.000000  77.000000   77.000000  \n",
       "mean   149.714286  75.987013   69.467532  \n",
       "std     12.743272  15.228517   17.033701  \n",
       "min    114.000000  15.000000   30.000000  \n",
       "25%    144.000000  72.000000   56.000000  \n",
       "50%    156.000000  81.000000   71.000000  \n",
       "75%    158.000000  85.000000   83.000000  \n",
       "max    160.000000  91.000000  100.000000  "
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# summary for numerical columns\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "5bee9903",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T13:37:15.860525Z",
     "iopub.status.busy": "2025-10-14T13:37:15.859905Z",
     "iopub.status.idle": "2025-10-14T13:37:15.881286Z",
     "shell.execute_reply": "2025-10-14T13:37:15.879949Z"
    },
    "papermill": {
     "duration": 0.031925,
     "end_time": "2025-10-14T13:37:15.883563",
     "exception": false,
     "start_time": "2025-10-14T13:37:15.851638",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fNAME</th>\n",
       "      <th>lNAME</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>77</td>\n",
       "      <td>77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>71</td>\n",
       "      <td>66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>Emma</td>\n",
       "      <td>Eliassen</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       fNAME     lNAME\n",
       "count     77        77\n",
       "unique    71        66\n",
       "top     Emma  Eliassen\n",
       "freq       2         2"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# summary for categorical columns\n",
    "df.describe(include='object')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "f6c5d034",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T13:37:15.903281Z",
     "iopub.status.busy": "2025-10-14T13:37:15.901135Z",
     "iopub.status.idle": "2025-10-14T13:37:15.914340Z",
     "shell.execute_reply": "2025-10-14T13:37:15.912794Z"
    },
    "papermill": {
     "duration": 0.023613,
     "end_time": "2025-10-14T13:37:15.916363",
     "exception": false,
     "start_time": "2025-10-14T13:37:15.892750",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 77 entries, 0 to 76\n",
      "Data columns (total 11 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   fNAME          77 non-null     object \n",
      " 1   lNAME          77 non-null     object \n",
      " 2   Age            77 non-null     int64  \n",
      " 3   gender         77 non-null     int64  \n",
      " 4   country        77 non-null     int32  \n",
      " 5   residence      77 non-null     int32  \n",
      " 6   entryEXAM      77 non-null     int64  \n",
      " 7   prevEducation  77 non-null     int32  \n",
      " 8   studyHOURS     77 non-null     int64  \n",
      " 9   Python         77 non-null     float64\n",
      " 10  DB             77 non-null     int64  \n",
      "dtypes: float64(1), int32(3), int64(5), object(2)\n",
      "memory usage: 5.8+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0f64c84",
   "metadata": {
    "papermill": {
     "duration": 0.006448,
     "end_time": "2025-10-14T13:37:15.929984",
     "exception": false,
     "start_time": "2025-10-14T13:37:15.923536",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Key Strategic Areas"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06d04945",
   "metadata": {
    "papermill": {
     "duration": 0.005894,
     "end_time": "2025-10-14T13:37:15.942439",
     "exception": false,
     "start_time": "2025-10-14T13:37:15.936545",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 1. Admissions Optimization\n",
    "Should entry exams remain the primary admissions filter?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "8372bc45",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T13:37:15.956947Z",
     "iopub.status.busy": "2025-10-14T13:37:15.956208Z",
     "iopub.status.idle": "2025-10-14T13:37:16.525492Z",
     "shell.execute_reply": "2025-10-14T13:37:16.523981Z"
    },
    "papermill": {
     "duration": 0.57819,
     "end_time": "2025-10-14T13:37:16.527121",
     "exception": false,
     "start_time": "2025-10-14T13:37:15.948931",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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9u0rOjg46GxrrG9LYVEUxT179ohNmjQRLS0tRTs7O7Fz587i1atXdfI83TI5MTFRJ11fO/UZMGCAaG1tXeh5PLd1uCjmbYs9a9YssXr16qJcLhcdHR3FoKAgcdq0aWJqaqo23+bNm8VatWqJFhYWore3tzhr1ixxxYoVBdr16NEjsVOnTqKtra0IQLv999M+PL8tcmF91teX5cuXi1WqVBHlcrkYEBAgrly5stCttEeMGCH+9ttv2vx169YtsP1zYeLj48WBAweKzs7Oorm5uVizZs0C/5+i+N+3Dn/WjRs3RKlUqve1vGvXLrFGjRqiubm56O/vL/72228v7O+znr4Of/jhB530wt43RXm/FPZ/9ey5561YsUKsW7eu9rXVokULcffu3YVcpZc/z7P+/vtvsWnTpqK1tbVobW0tBgQEiCNGjBCjo6O1ea5evSq2adNGtLGxEZ2dncWPP/5YvHDhQoH3qEqlEkeNGiW6uLiIgiDo9CUxMVHs1q2baGVlJTo6OopDhw4VL1++rHfr8Be9/37++WcxKChItLS0FG1tbcWaNWuK48aN024hf+7cObFPnz5ipUqVRLlcLrq6uorvvvuuzhb4RGQaBFEs5lXKRERE/08QBIwYMQI//fRTaTeFiIjIYFyzREREREREpAcHS0RERERERHpwsERERERERKQHB0tERGQ0oihyvRIRERVw6NAhdO7cGRUqVIAgCIX+/MSzDhw4gHr16kEul6Ny5cqIiIgwejs5WCIiIiIiohKVmZmJ2rVrY+HChUXKHxMTg06dOqFVq1aIjIzE559/jiFDhmDnzp1GbSd3wyMiIiIiolIjCAI2btyIrl27Fppn/Pjx2LZtGy5fvqxN6927N1JSUrBjxw6jtY2RJSIiIiIiemUKhQJpaWk6h0KhKJa6jx8/jjZt2uiktW/fHsePHy+W+gsjM2rtRERERET02thm5m+0uk9P7INp06bppE2ZMgVTp0595bofPXoENzc3nTQ3NzekpaUhOzsblpaWr/wc+nCw9AYy5ouc/rtOymhMXFE8d0+o+M0cJMefRznr+HXUp4mAPRf53nkdtakl5+faa2zmIDlW7CvtVpA+g94u7RaUjrCwMISGhuqkyeXyUmpN8eBgiYiIiIjIRAhmgtHqlsvlRhscubu7Iz4+XictPj4ednZ2RosqAVyzREREREREr7ng4GDs3btXJ2337t0IDg426vMyskREREREZCIkMuNFlgyRkZGBmzdvah/HxMQgMjIS5cqVQ6VKlRAWFoYHDx5g9erVAIBhw4bhp59+wrhx4zBo0CDs27cP69atw7Zt24zaTkaWiIiIiIioRJ05cwZ169ZF3bp1AQChoaGoW7cuJk+eDACIi4vD3bt3tfl9fHywbds27N69G7Vr18acOXOwbNkytG/f3qjtZGSJiIiIiMhECGavR6ykZcuWeNHPvUZEROgtc/78eSO2qiAOloiIiIiITMTrMg3vTfF6DC2JiIiIiIheM4wsERERERGZCGNuHV4WMbJERERERESkByNLREREREQmgmuWDMPIEhERERERkR6MLBERERERmQiuWTIMI0tERERERER6MLJERERERGQiuGbJMIwsERERERER6cHIEhERERGRiRCkjCwZgoMlIiIiIiITIeFgySCchkdERERERKQHI0tERERERCZCkDCyZAhGloiIiIiIiPRgZImIiIiIyEQIUsZKDMGrRUREREREpAcjS0REREREJoK74RmGkSUiIiIiIiI9GFkiIiIiIjIR3A3PMBwsERERERGZCE7DMwyn4REREREREenByBIRERERkYkQGFkyCCNLREREREREejCyRERERERkIgQJYyWG4NUiIiIiIiLSg5GlIjp+/DiaNm2KDh06YNu2baXdnNdOuab14TtmMOzr1YBFBVec6fYp4jfvfXGZ5g0QOHsCbAKrIOdeHG6GL8b91Rt18ngN7wvf0MGQu7sg7eI1XPl8OlJPXzJmV8q01nWleMtfCgtz4E6CiM3HVHicJr6wTMNqEjSrIYONJfAoWcTW4yrcT8ov815jGfwqSGBnBeQqgbsJGuw4o0ZS6ovrpXyn9v6OozuWIyM1Ce6eAejYbxIq+tbSmzfhwQ3s3/Q/PIy9gtTHD9G+dxiC2w3QyXN6/584vf9PpCQ9AAC4elRGi84jUKVWc6P3paw5uGMN9myOQFpKEjy8qqLnoDB4V6mpN+/RPX/h5MEteHjvJgCgkm8guvQZrZM/8uQeHN61HvduX0VmRiomfL8Onj4BJdKXsoqfa6+ncwd+x8ndy5GZlgjXigFo0+trVPDW/7mW+PAGjmz5Hx7dvYK0Jw/wdvcwvNU65JXqpMJx63DDMLJURMuXL8eoUaNw6NAhPHz4sLSb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7AypVIr4+Hid9Pj4eLi7u+utu3z58jAzM4NUKtWmVatWDY8ePUJubi7Mzc2LoQcFMbJERERERESvTC6Xw87OTufQN1gyNzdHUFAQ9u7dq03TaDTYu3cvgoOD9dbdpEkT3Lx5ExqNRpt2/fp1lC9f3mgDJYCDJSIiIiIi02HEaXiGCA0NxS+//IJVq1YhKioKw4cPR2ZmpnZ3vP79+yMsLEybf/jw4Xjy5Ak+++wzXL9+Hdu2bcO3336LESNGFOvleR6n4RERERERUYnq1asXEhMTMXnyZDx69Ah16tTBjh07tJs+3L17F5Jnpgx6enpi586d+OKLL1CrVi14eHjgs88+w/jx443aTg6WiIiIiIhMhQFbfBvbyJEjMXLkSL3nDhw4UCAtODgYJ06cMHKrdL0+V4uIiIiIiOg1wsgSEREREZGpMOJueGURrxYREREREZEegiiKYmk3goiIiIiIjC9n53Kj1W3RfrDR6i4tnIb3BvrzKMe3r6M+TQQMm5Vc2s2gQiwZ74htZv6l3QzSo5MyGvdH9SztZpAeFResw5MZQ0u7GVSIcpOWImfT/0q7GaSHRdfRpd2Ewr1GGzy8CXi1iIiIiIiI9GBkiYiIiIjIVBj447GmjpElIiIiIiIiPRhZIiIiIiIyFdw63CC8WkRERERERHowskREREREZCJErlkyCCNLREREREREejCyRERERERkKvg7Swbh1SIiIiIiItKDkSUiIiIiIlPByJJBOFgiIiIiIjIR3ODBMBxaEhERERER6cHIEhERERGRqeA0PIPwahEREREREenByBIRERERkangmiWDMLJERERERESkByNLRERERESmQsJYiSF4tYiIiIiIiPRgZImIiIiIyETwd5YMw8ESEREREZGp4NbhBuHVIiIiIiIi0oORJSIiIiIiEyEysmQQXi0iIiIiIiI9GFkiIiIiIjIV3ODBIIwsERERERER6cHIEhERERGRieCaJcPwahEREREREenByBIRERERkangmiWDcLBERERERGQqOA3PILxaREREREREejCyRERERERkIkROwzPIaz1Ymjp1KjZt2oTIyMhiqc/b2xt37twpkB4eHo4JEyZg+/bt6Nq1K06cOIF69eppz8+ZMwfh4eG4fPky3N3dtenHjx9H06ZN0aFDB2zbtk2nztjYWPj4+EAikeDu3bvw8PDQ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LoXh1uFERERERPTKwsLCEBoaqpMml8tfud709HR89NFH+OWXX+Ds7PzK9RmCgyUiIiIiIhPxX3atKyq5XF6kwZGzszOkUini4+N10uPj4+Hu7l4g/61btxAbG4vOnTtr0zQaDQBAJpMhOjoafn5+r9h6/TgNj4iIiIjIRLwOGzyYm5sjKCgIe/fu1aZpNBrs3bsXwcHBBfIHBATg0qVLiIyM1B5dunRBq1atEBkZCU9Pz2K5NvowskRERERERCUqNDQUAwYMQP369dGgQQPMnz8fmZmZGDhwIACgf//+8PDwQHh4OCwsLFCjRg2d8g4ODgBQIL24cbBERERERGQijDkNzxC9evVCYmIiJk+ejEePHqFOnTrYsWOHdtOHu3fvQiIp/UlwHCwREREREVGJGzlyJEaOHKn33IEDB15YNiIiovgbpAcHS0REREREJsLQH481dbxaREREREREejCyRERERERkIl6XNUtvCkaWiIiIiIiI9GBkiYiIiIjIRHDNkmE4WCIiIiIiMhGchmcYDi2JiIiIiIj0EERRFEu7EUREREREZHy3bt82Wt1+vr5Gq7u0cBreG2jPRUVpN4H0aFNLjs8XZJR2M6gQ80fZ4P6onqXdDNKj4oJ12GbmX9rNID06KaORMDGktJtBhXCdGYGU8/tKuxmkh0Pdt0u7CVRMOFgiIiIiIjIRosg1S4bgmiUiIiIiIiI9GFkiIiIiIjIRImMlBuHVIiIiIiIi0oORJSIiIiIiE8HfWTIMB0tERERERCaCgyXDcBoeERERERGRHowsERERERGZCEaWDMPIEhERERERkR6MLBERERERmQhGlgzDyBIREREREZEejCwREREREZkIUWRkyRCMLBEREREREenByBIRERERkYngmiXDMLJERERERESkByNLREREREQmgpElw3CwRERERERkIjhYMgyn4REREREREenByBIRERERkYng1uGGYWSJiIiIiIhID0aWiIiIiIhMhIZrlgzCyBIREREREZEejCwREREREZkI7oZnGEaWiIiIiIiI9GBkiYiIiIjIRHA3PMNwsEREREREZCI4Dc8wnIZHRERERESkByNLREREREQmgtPwDMPIEhERERERkR6MLBERERERmQiuWTLMaxlZioiIgIODQ2k3g4iIiIiITFixRZZCQkKQkpKCTZs2FVeVRRYbGwsf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",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# correlations of entryExam with Python/DB/studyHours\n",
    "numeric_df = df.select_dtypes(include=['int64', 'float64'])\n",
    "corr_matrix = numeric_df.corr()\n",
    "\n",
    "# Plot heatmap\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=\".2f\", linewidths=0.5)\n",
    "plt.title('Correlation Heatmap of Numeric Features')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "c391b40d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T13:37:16.544236Z",
     "iopub.status.busy": "2025-10-14T13:37:16.543901Z",
     "iopub.status.idle": "2025-10-14T13:37:16.586841Z",
     "shell.execute_reply": "2025-10-14T13:37:16.585446Z"
    },
    "papermill": {
     "duration": 0.053863,
     "end_time": "2025-10-14T13:37:16.589288",
     "exception": false,
     "start_time": "2025-10-14T13:37:16.535425",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature importance for Python:\n",
      " studyHOURS       0.661339\n",
      "entryEXAM        0.298685\n",
      "prevEducation    0.129014\n",
      "Age             -0.271812\n",
      "dtype: float64\n",
      "\n",
      "Feature importance for DB:\n",
      " entryEXAM        0.691088\n",
      "prevEducation    0.102083\n",
      "Age              0.049295\n",
      "studyHOURS      -0.105664\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "features = ['entryEXAM', 'studyHOURS', 'Age', 'prevEducation']\n",
    "X = df[features]\n",
    "y_python = df['Python']\n",
    "y_db = df['DB']\n",
    "\n",
    "# Train models\n",
    "model_python = LinearRegression().fit(X, y_python)\n",
    "model_db = LinearRegression().fit(X, y_db)\n",
    "\n",
    "# Extract feature importance\n",
    "importance_python = pd.Series(model_python.coef_, index=features).sort_values(ascending=False)\n",
    "importance_db = pd.Series(model_db.coef_, index=features).sort_values(ascending=False)\n",
    "\n",
    "print(\"Feature importance for Python:\\n\", importance_python)\n",
    "print(\"\\nFeature importance for DB:\\n\", importance_db)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e18dd6d8",
   "metadata": {
    "papermill": {
     "duration": 0.011332,
     "end_time": "2025-10-14T13:37:16.609922",
     "exception": false,
     "start_time": "2025-10-14T13:37:16.598590",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "- entryExams can remained as primary admissions filter for DB-focused programs because the coefficient is highest among features (0.69)\n",
    "<br>\n",
    "- for Python-focused programs, studyHours shows a highest coefficient (0.66) which can introduce a new behavioral and skill-based filters for admissions filter"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c588637e",
   "metadata": {
    "papermill": {
     "duration": 0.009019,
     "end_time": "2025-10-14T13:37:16.626701",
     "exception": false,
     "start_time": "2025-10-14T13:37:16.617682",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 2. Curriculum Support Strategy\n",
    "Are there at-risk student groups who need extra support?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "53b04846",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T13:37:16.648245Z",
     "iopub.status.busy": "2025-10-14T13:37:16.647885Z",
     "iopub.status.idle": "2025-10-14T13:37:16.654874Z",
     "shell.execute_reply": "2025-10-14T13:37:16.653025Z"
    },
    "papermill": {
     "duration": 0.021946,
     "end_time": "2025-10-14T13:37:16.657102",
     "exception": false,
     "start_time": "2025-10-14T13:37:16.635156",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 → Bachelors\n",
      "1 → Diploma\n",
      "2 → Doctorate\n",
      "3 → High School\n",
      "4 → Masters\n"
     ]
    }
   ],
   "source": [
    "for i, label in enumerate(le.classes_):\n",
    "    print(f\"{i} → {label}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "4a8460e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T13:37:16.676470Z",
     "iopub.status.busy": "2025-10-14T13:37:16.675525Z",
     "iopub.status.idle": "2025-10-14T13:37:16.718232Z",
     "shell.execute_reply": "2025-10-14T13:37:16.716238Z"
    },
    "papermill": {
     "duration": 0.056366,
     "end_time": "2025-10-14T13:37:16.721440",
     "exception": false,
     "start_time": "2025-10-14T13:37:16.665074",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"3\" halign=\"left\">Python</th>\n",
       "      <th colspan=\"3\" halign=\"left\">DB</th>\n",
       "      <th colspan=\"3\" halign=\"left\">entryEXAM</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>prevEducation</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>80.000000</td>\n",
       "      <td>6.396614</td>\n",
       "      <td>25</td>\n",
       "      <td>70.880000</td>\n",
       "      <td>16.414729</td>\n",
       "      <td>25</td>\n",
       "      <td>80.640000</td>\n",
       "      <td>9.686245</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>70.083333</td>\n",
       "      <td>20.029335</td>\n",
       "      <td>12</td>\n",
       "      <td>69.000000</td>\n",
       "      <td>18.547237</td>\n",
       "      <td>12</td>\n",
       "      <td>70.166667</td>\n",
       "      <td>18.374059</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>75.600000</td>\n",
       "      <td>25.025986</td>\n",
       "      <td>5</td>\n",
       "      <td>69.800000</td>\n",
       "      <td>18.713631</td>\n",
       "      <td>5</td>\n",
       "      <td>79.600000</td>\n",
       "      <td>27.808272</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>70.157895</td>\n",
       "      <td>19.215917</td>\n",
       "      <td>19</td>\n",
       "      <td>61.421053</td>\n",
       "      <td>17.150691</td>\n",
       "      <td>19</td>\n",
       "      <td>67.947368</td>\n",
       "      <td>15.661253</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>81.187500</td>\n",
       "      <td>8.863549</td>\n",
       "      <td>16</td>\n",
       "      <td>77.062500</td>\n",
       "      <td>13.901888</td>\n",
       "      <td>16</td>\n",
       "      <td>85.187500</td>\n",
       "      <td>15.505778</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Python                          DB                   \\\n",
       "                    mean        std count       mean        std count   \n",
       "prevEducation                                                           \n",
       "0              80.000000   6.396614    25  70.880000  16.414729    25   \n",
       "1              70.083333  20.029335    12  69.000000  18.547237    12   \n",
       "2              75.600000  25.025986     5  69.800000  18.713631     5   \n",
       "3              70.157895  19.215917    19  61.421053  17.150691    19   \n",
       "4              81.187500   8.863549    16  77.062500  13.901888    16   \n",
       "\n",
       "               entryEXAM                   \n",
       "                    mean        std count  \n",
       "prevEducation                              \n",
       "0              80.640000   9.686245    25  \n",
       "1              70.166667  18.374059    12  \n",
       "2              79.600000  27.808272     5  \n",
       "3              67.947368  15.661253    19  \n",
       "4              85.187500  15.505778    16  "
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('prevEducation')[['Python', 'DB', 'entryEXAM']].agg(['mean', 'std', 'count'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e02784f9",
   "metadata": {
    "papermill": {
     "duration": 0.007536,
     "end_time": "2025-10-14T13:37:16.737104",
     "exception": false,
     "start_time": "2025-10-14T13:37:16.729568",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "- Group 3, High School students tend to achieve lower score in Python, DB, and entry Exam with the lowest mean Python (70.15), DB (61.42), entryExam (85.18)\n",
    "<br>\n",
    "- This group required more support in getting better performance"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1cb2b80",
   "metadata": {
    "papermill": {
     "duration": 0.007461,
     "end_time": "2025-10-14T13:37:16.752467",
     "exception": false,
     "start_time": "2025-10-14T13:37:16.745006",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 3. Resource Allocation & Program ROI\n",
    "How can we allocate resources for maximum student success?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "7495d2fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T13:37:16.769043Z",
     "iopub.status.busy": "2025-10-14T13:37:16.768745Z",
     "iopub.status.idle": "2025-10-14T13:37:16.775722Z",
     "shell.execute_reply": "2025-10-14T13:37:16.774396Z"
    },
    "papermill": {
     "duration": 0.017539,
     "end_time": "2025-10-14T13:37:16.777645",
     "exception": false,
     "start_time": "2025-10-14T13:37:16.760106",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "features = ['Python', 'DB', 'entryEXAM', 'studyHOURS']\n",
    "X = df[features]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "a23562bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T13:37:16.796225Z",
     "iopub.status.busy": "2025-10-14T13:37:16.795834Z",
     "iopub.status.idle": "2025-10-14T13:37:16.806412Z",
     "shell.execute_reply": "2025-10-14T13:37:16.805127Z"
    },
    "papermill": {
     "duration": 0.022935,
     "end_time": "2025-10-14T13:37:16.808759",
     "exception": false,
     "start_time": "2025-10-14T13:37:16.785824",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "scaler = StandardScaler()\n",
    "X_scaled = scaler.fit_transform(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "e0a376ca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T13:37:16.826858Z",
     "iopub.status.busy": "2025-10-14T13:37:16.826484Z",
     "iopub.status.idle": "2025-10-14T13:37:17.323484Z",
     "shell.execute_reply": "2025-10-14T13:37:17.320958Z"
    },
    "papermill": {
     "duration": 0.508659,
     "end_time": "2025-10-14T13:37:17.325487",
     "exception": false,
     "start_time": "2025-10-14T13:37:16.816828",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.cluster import KMeans\n",
    "\n",
    "# cluster the performance and effort\n",
    "kmeans = KMeans(n_clusters=3, random_state=42)\n",
    "df['cluster'] = kmeans.fit_predict(X_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "f4dd29d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T13:37:17.344081Z",
     "iopub.status.busy": "2025-10-14T13:37:17.343750Z",
     "iopub.status.idle": "2025-10-14T13:37:17.357830Z",
     "shell.execute_reply": "2025-10-14T13:37:17.356445Z"
    },
    "papermill": {
     "duration": 0.025709,
     "end_time": "2025-10-14T13:37:17.359819",
     "exception": false,
     "start_time": "2025-10-14T13:37:17.334110",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Python</th>\n",
       "      <th>DB</th>\n",
       "      <th>entryEXAM</th>\n",
       "      <th>studyHOURS</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cluster</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>82.823529</td>\n",
       "      <td>76.803922</td>\n",
       "      <td>85.941176</td>\n",
       "      <td>156.588235</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>33.666667</td>\n",
       "      <td>53.500000</td>\n",
       "      <td>48.333333</td>\n",
       "      <td>119.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>71.250000</td>\n",
       "      <td>55.550000</td>\n",
       "      <td>61.850000</td>\n",
       "      <td>141.400000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Python         DB  entryEXAM  studyHOURS\n",
       "cluster                                             \n",
       "0        82.823529  76.803922  85.941176  156.588235\n",
       "1        33.666667  53.500000  48.333333  119.000000\n",
       "2        71.250000  55.550000  61.850000  141.400000"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('cluster')[features].mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9170e1a",
   "metadata": {
    "papermill": {
     "duration": 0.00904,
     "end_time": "2025-10-14T13:37:17.377657",
     "exception": false,
     "start_time": "2025-10-14T13:37:17.368617",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Cluster 0: Effort-Driven Learners**\n",
    "<br>\n",
    "- Moderate scores, especially in DB\n",
    "<br>\n",
    "- High study hours suggest strong effort\n",
    "<br>\n",
    "- May benefit from targeted skill-building and mentorship\n",
    "<br>\n",
    "\n",
    "**Cluster 1: At-Risk Students**\n",
    "<br>\n",
    "- Lowest scores across all metrics\n",
    "<br>\n",
    "- Lower study hours and exam scores\n",
    "<br>\n",
    "- Needs foundational support: prep courses, tutoring, and engagement strategies\n",
    "<br>\n",
    "\n",
    "**Cluster 2: High Achievers**\n",
    "<br>\n",
    "- Strong scores in Python, DB, and entry exams\n",
    "<br>\n",
    "- High study hours confirm disciplined learning\n",
    "<br>\n",
    "- Ideal for advanced modules, research opportunities, and leadership roles\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "365dc143",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T13:37:17.395733Z",
     "iopub.status.busy": "2025-10-14T13:37:17.395349Z",
     "iopub.status.idle": "2025-10-14T13:37:17.755579Z",
     "shell.execute_reply": "2025-10-14T13:37:17.754232Z"
    },
    "papermill": {
     "duration": 0.371532,
     "end_time": "2025-10-14T13:37:17.757717",
     "exception": false,
     "start_time": "2025-10-14T13:37:17.386185",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "pca = PCA(n_components=2)\n",
    "X_pca = pca.fit_transform(X_scaled)\n",
    "\n",
    "plt.figure(figsize=(8,6))\n",
    "plt.scatter(X_pca[:,0], X_pca[:,1], c=df['cluster'], cmap='viridis')\n",
    "plt.xlabel('PCA 1')\n",
    "plt.ylabel('PCA 2')\n",
    "plt.title('Student Segmentation via K-Means')\n",
    "plt.colorbar(label='Cluster')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5859203,
     "sourceId": 13367079,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31153,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.0"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 14.501947,
   "end_time": "2025-10-14T13:37:18.490168",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-10-14T13:37:03.988221",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
